import matplotlib.pyplot as plt
import numpy as np
import decimal
#decimal.getcontext().prec = 400
#User defined
def p_dot(p,q,t):
	return (-0.5*q)

c = 10
def q_dot(p,q,t):
	return p/np.sqrt(1 + (p/c)**2)


t = 0
dt = 0
p_0 = 0
q_0 = 0
p_dot_0 = 0
q_dot_0 = 0
h = [0.0, 0.0562625605369221464656521910318, 0.180240691736892364987579942780, 0.352624717113169637373907769648, 0.547153626330555383001448554766, 0.734210177215410531523210605558, 0.885320946839095768090359771030, 0.977520613561287501891174488626]
b_p = [0,0,0,0,0,0,0,0]
g_p = [0,0,0,0,0,0,0,0]
b_q = [0,0,0,0,0,0,0,0]
g_q = [0,0,0,0,0,0,0,0]


def p_substep(h):
	return p_0 + (h*dt)*(p_dot_0+(h/2)*(b_p[0] + (2*h/3)*(b_p[1]+(3*h/4)*(b_p[2]+(4*h/5)*(b_p[3]+(5*h/6)*(b_p[4]+(6*h/7)*(b_p[5]+(7*h/8)*(b_p[6]+(8*h/9)*(b_p[7])))))))));

def q_substep(h):
	return q_0 + (h*dt)*(q_dot_0+(h/2)*(b_q[0] + (2*h/3)*(b_q[1]+(3*h/4)*(b_q[2]+(4*h/5)*(b_q[3]+(5*h/6)*(b_q[4]+(6*h/7)*(b_q[5]+(7*h/8)*(b_q[6]+(8*h/9)*(b_q[7])))))))));


def compute_g_values():
	g_p[0] = ( (p_dot(p_substep(h[1]),q_substep(h[1]),0) - p_dot_0) / h[1] );
	g_p[1] = ( (p_dot(p_substep(h[2]),q_substep(h[2]),0) - p_dot_0 - g_p[0]*h[2] ) / (h[2]*(h[2]-h[1])) );
	g_p[2] = ( (p_dot(p_substep(h[3]),q_substep(h[3]),0) - p_dot_0 - g_p[0]*h[3] - g_p[1]*h[3]*(h[3]-h[1]) ) / (h[3]*(h[3]-h[1])*(h[3]-h[2])) );
	g_p[3] = ( (p_dot(p_substep(h[4]),q_substep(h[4]),0) - p_dot_0 - g_p[0]*h[4] - g_p[1]*h[4]*(h[4]-h[1]) - g_p[2]*h[4]*(h[4]-h[1])*(h[4]-h[2]) ) / (h[4]*(h[4]-h[1])*(h[4]-h[2]) * (h[4]-h[3])) );
	g_p[4] = ( (p_dot(p_substep(h[5]),q_substep(h[5]),0) - p_dot_0 - g_p[0]*h[5] - g_p[1]*h[5]*(h[5]-h[1]) - g_p[2]*h[5]*(h[5]-h[1])*(h[5]-h[2]) - g_p[3]*h[5]*(h[5]-h[1])*(h[5]-h[2])*(h[5]-h[3]) ) / (h[5]*(h[5]-h[1])*(h[5]-h[2])*(h[5]-h[3])*(h[5]-h[4])) );
	g_p[5] = ( (p_dot(p_substep(h[6]),q_substep(h[6]),0) - p_dot_0 - g_p[0]*h[6] - g_p[1]*h[6]*(h[6]-h[1]) - g_p[2]*h[6]*(h[6]-h[1])*(h[6]-h[2]) - g_p[3]*h[6]*(h[6]-h[1])*(h[6]-h[2])*(h[6]-h[3]) - g_p[4]*h[6]*(h[6]-h[1])*(h[6]-h[2])*(h[6]-h[3])*(h[6]-h[4]) ) / (h[6]*(h[6]-h[1])*(h[6]-h[2])*(h[6]-h[3])*(h[6]-h[4])*(h[6]-h[5])) );
	g_p[6] = ( (p_dot(p_substep(h[7]),q_substep(h[7]),0) - p_dot_0 - g_p[0]*h[7] - g_p[1]*h[7]*(h[7]-h[1]) - g_p[2]*h[7]*(h[7]-h[1])*(h[7]-h[2]) - g_p[3]*h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3]) - g_p[4]*h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3])*(h[7]-h[4]) - g_p[5]*h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3])*(h[7]-h[4])*(h[7]-h[5]) ) / (h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3])*(h[7]-h[4])*(h[7]-h[5])*(h[7]-h[6])) );
	g_p[7] = ( (p_dot(p_substep(1),q_substep(1),0) - p_dot_0 - g_p[0] - g_p[1]*(1-h[1]) - g_p[2]*(1-h[1])*(1-h[2]) - g_p[3]*(1-h[1])*(1-h[2])*(1-h[3]) - g_p[4]*(1-h[1])*(1-h[2])*(1-h[3])*(1-h[4]) - g_p[5]*(1-h[1])*(1-h[2])*(1-h[3])*(1-h[4])*(1-h[5]) - g_p[6]*(1-h[1])*(1-h[2])*(1-h[3])*(1-h[4])*(1-h[5])*(1-h[6]) ) / ((1-h[1])*(1-h[2])*(1-h[3])*(1-h[4])*(1-h[5])*(1-h[6])*(1-h[7])) );
	
	convert_g_to_b()

	g_q[0] = ( (q_dot(p_substep(h[1]),q_substep(h[1]),0) - q_dot_0) / h[1] );
	g_q[1] = ( (q_dot(p_substep(h[2]),q_substep(h[2]),0) - q_dot_0 - g_q[0]*h[2] ) / (h[2]*(h[2]-h[1])) );
	g_q[2] = ( (q_dot(p_substep(h[3]),q_substep(h[3]),0) - q_dot_0 - g_q[0]*h[3] - g_q[1]*h[3]*(h[3]-h[1]) ) / (h[3]*(h[3]-h[1])*(h[3]-h[2])) );
	g_q[3] = ( (q_dot(p_substep(h[4]),q_substep(h[4]),0) - q_dot_0 - g_q[0]*h[4] - g_q[1]*h[4]*(h[4]-h[1]) - g_q[2]*h[4]*(h[4]-h[1])*(h[4]-h[2]) ) / (h[4]*(h[4]-h[1])*(h[4]-h[2]) * (h[4]-h[3])) );
	g_q[4] = ( (q_dot(p_substep(h[5]),q_substep(h[5]),0) - q_dot_0 - g_q[0]*h[5] - g_q[1]*h[5]*(h[5]-h[1]) - g_q[2]*h[5]*(h[5]-h[1])*(h[5]-h[2]) - g_q[3]*h[5]*(h[5]-h[1])*(h[5]-h[2])*(h[5]-h[3]) ) / (h[5]*(h[5]-h[1])*(h[5]-h[2])*(h[5]-h[3])*(h[5]-h[4])) );
	g_q[5] = ( (q_dot(p_substep(h[6]),q_substep(h[6]),0) - q_dot_0 - g_q[0]*h[6] - g_q[1]*h[6]*(h[6]-h[1]) - g_q[2]*h[6]*(h[6]-h[1])*(h[6]-h[2]) - g_q[3]*h[6]*(h[6]-h[1])*(h[6]-h[2])*(h[6]-h[3]) - g_q[4]*h[6]*(h[6]-h[1])*(h[6]-h[2])*(h[6]-h[3])*(h[6]-h[4]) ) / (h[6]*(h[6]-h[1])*(h[6]-h[2])*(h[6]-h[3])*(h[6]-h[4])*(h[6]-h[5])) );
	g_q[6] = ( (q_dot(p_substep(h[7]),q_substep(h[7]),0) - q_dot_0 - g_q[0]*h[7] - g_q[1]*h[7]*(h[7]-h[1]) - g_q[2]*h[7]*(h[7]-h[1])*(h[7]-h[2]) - g_q[3]*h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3]) - g_q[4]*h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3])*(h[7]-h[4]) - g_q[5]*h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3])*(h[7]-h[4])*(h[7]-h[5]) ) / (h[7]*(h[7]-h[1])*(h[7]-h[2])*(h[7]-h[3])*(h[7]-h[4])*(h[7]-h[5])*(h[7]-h[6])) );
	g_q[7] = ( (q_dot(p_substep(1),q_substep(1),0) - q_dot_0 - g_q[0] - g_q[1]*(1-h[1]) - g_q[2]*(1-h[1])*(1-h[2]) - g_q[3]*(1-h[1])*(1-h[2])*(1-h[3]) - g_q[4]*(1-h[1])*(1-h[2])*(1-h[3])*(1-h[4]) - g_q[5]*(1-h[1])*(1-h[2])*(1-h[3])*(1-h[4])*(1-h[5]) - g_q[6]*(1-h[1])*(1-h[2])*(1-h[3])*(1-h[4])*(1-h[5])*(1-h[6]) ) / ((1-h[1])*(1-h[2])*(1-h[3])*(1-h[4])*(1-h[5])*(1-h[6])*(1-h[7])) );

	convert_g_to_b()
	


c_m =  np.array([[1.00000000000000000000, -0.0562625605369221500, 0.01014080283006363000, -0.0035758977292516170, 0.00195656540994722100, -0.0014365302363708915, 0.00127179030902686780, -0.0012432012432012432],
				[0.00000000000000000000, 1.00000000000000000000, -0.2365032522738145200, 0.09353769525946207000, -0.0547553868890686900, 0.04215852772126870600, -0.0387603579159067700, 0.03916083916083916000], 
				[0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000, -0.5891279693869842000, 0.41588120008230690000, -0.3600995965020568000, 0.36096224345284600000, -0.3916083916083916000],
				[0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000, -1.1362815957175396000, 1.25015071184069100000, -1.4668842084004270000, 1.79487179487179470000],
				[0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000, -1.8704917729329500000, 2.90613625930842900000, -4.3076923076923075000],
				[0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000, -2.7558127197720457000, 5.60000000000000000000],
				[0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000, -3.7333333333333334000],
				[0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000]])


def convert_g_to_b():
	global b_q, b_p
	b_q = np.matmul(c_m,g_q)
	b_p = np.matmul(c_m,g_p)



count = 0
def step():
	global count

	if (t == 0):
		max_count = 12
	else:
		max_count = 5

	if (count == 0):
		compute_g_values()
	
	compute_g_values()

	if count >= max_count:
		print("Ended iteration with: " ,count)
		count = 0
		return p_substep(1),q_substep(1)

	else:
		count += 1
		return step()


def integrate(dt_, t_final, q_init, p_init):
	global t, dt, p_0, q_0, p_dot_0, q_dot_0
	t = 0
	dt = dt_
	p_0 = p_init
	q_0 = q_init
	p_dot_0 = p_dot(p_init,q_init,0)
	q_dot_0 = q_dot(p_init,q_init,0)
	p_data = [p_init]
	q_data = [q_init]

	while (t < t_final):
		p,q = step()
		t += dt
		if (t < t_final):
			p_data.append(p)
			q_data.append(q)
		p_0 = p
		q_0 = q
		p_dot_0 = p_dot(p,q,t)
		q_dot_0 = q_dot(p,q,t)

	return q_data,p_data


dt = 2*np.pi/20

t_final = 16*2*np.pi

q,p = integrate(dt,t_final,0,5)

t = np.arange(0,t_final,step = dt)

t = t / (2*np.pi)

E_0 = 0.5*q[0]**2 + 0.5*p[0]**2
print(E_0)

delE = []
for i in range(len(q)):
	E = 0.5*q[i]**2 + 0.5*p[i]**2
	delE.append((E - E_0)/E_0)


plt.plot(t,q)
#plt.plot(t,p)
#plt.plot(t,q - np.sin(2*np.pi*t))

#plt.plot(t,delE)

plt.xlabel("Periods")
plt.ylabel("Energy Error")
plt.title("Relative Energy Error for SHM system") 
plt.show()








